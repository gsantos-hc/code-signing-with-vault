# Sample GitHub workflow for signing a PowerShell script using a short-lived
# code signing certificate from HashiCorp Vault. This is NOT optimized for a
# production environment.

name: sign-script
run-name: "Sign PowerShell script"

on:
  push: {} # FIXME: For testing purposes only
  release:
    types: [published]

env:
  # Be sure to configure VAULT_ADDR and VAULT_NAMESPACE in your repository variables
  VAULT_ADDR: ${{ vars.VAULT_ADDR }}
  VAULT_NAMESPACE: ${{ vars.VAULT_NAMESPACE }}
  environment: prod

jobs:
  authenticode:
    runs-on: windows-latest
    environment: prod
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Vault CLI
        shell: powershell
        run: |
          Invoke-WebRequest -OutFile "vault.zip" -Uri "https://releases.hashicorp.com/vault/1.16.1/vault_1.16.1_windows_amd64.zip"
          Expand-Archive -Path "vault.zip" -DestinationPath .
          Remove-Item "vault.zip"

      - name: Authenticate to Vault
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ env.VAULT_ADDR }}
          namespace: ${{ env.VAULT_NAMESPACE }}
          method: jwt
          path: gh-actions
          role: repository
          jwtGithubAudience: ${{ env.VAULT_ADDR }}
          exportToken: true

      - name: Get code signing certificate
        shell: powershell
        run: |
          $Endpoint = "pki-codesign/issue/github-actions"
          $CertSubject = "spiffe://github.com/${{ github.repository }}@${{ github.job }}"
          $Cert = $(./vault.exe write -format=json "$Endpoint" common_name="$CertSubject" uri_sans="$CertSubject")
          $CertJson = $Cert | ConvertFrom-Json
          Set-Content -Path "codesigning.crt" -Value "$($CertJson.data.certificate)`n$($CertJson.data.ca_chain -Join "`n")"
          Set-Content -Path "codesigning.key" -Value "$($CertJson.data.private_key)"
          openssl pkcs12 -export -out codesigning.pfx -inkey codesigning.key -in codesigning.crt -passout pass:""
          Remove-Item -Path codesigning.crt,codesigning.key

      - name: Sign PowerShell script
        shell: powershell
        run: |
          $Cert = Get-PfxCertificate -FilePath "codesigning.pfx"
          Set-AuthenticodeSignature `
            -Certificate $Cert `
            -FilePath "hello-world.ps1" `
            -TimestampServer "http://timestamp.digicert.com"

      - name: Upload signed PowerShell script
        uses: actions/upload-artifact@v3
        with:
          name: signed-powershell
          path: hello-world.ps1
          retention-days: 1
